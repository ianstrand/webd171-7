{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchForVideos),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchForVideos);\n\nimport * as searchActions from '../actions/search';\nimport { REQUEST } from '../actions';\nimport { fork, take } from 'redux-saga/effects';\nimport * as api from '../api/youtube-api';\nimport { fetchEntity } from './index';\nexport function searchForVideos(searchQuery, nextPageToken, amount) {\n  var request;\n  return _regeneratorRuntime.wrap(function searchForVideos$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          request = api.buildSearchRequest.bind(null, searchQuery, nextPageToken, amount);\n          _context.next = 3;\n          return fetchEntity(request, searchActions.forVideos, searchQuery);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/******************************************************************************/\n\n/******************************* WATCHERS *************************************/\n\n/******************************************************************************/\n\nexport function watchSearchForVideos() {\n  var _yield$take, searchQuery, amount, nextPageToken;\n\n  return _regeneratorRuntime.wrap(function watchSearchForVideos$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(searchActions.SEARCH_FOR_VIDEOS[REQUEST]);\n\n        case 3:\n          _yield$take = _context2.sent;\n          searchQuery = _yield$take.searchQuery;\n          amount = _yield$take.amount;\n          nextPageToken = _yield$take.nextPageToken;\n          _context2.next = 9;\n          return fork(searchForVideos, searchQuery, nextPageToken, amount);\n\n        case 9:\n          _context2.next = 0;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/store/sagas/search.js"],"names":["searchForVideos","watchSearchForVideos","searchActions","REQUEST","fork","take","api","fetchEntity","searchQuery","nextPageToken","amount","request","buildSearchRequest","bind","forVideos","SEARCH_FOR_VIDEOS"],"mappings":";;oDAMiBA,e;qDAQAC,oB;;AAdjB,OAAO,KAAKC,aAAZ,MAA+B,mBAA/B;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,IAAR,EAAcC,IAAd,QAAyB,oBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,SAAQC,WAAR,QAA0B,SAA1B;AAEA,OAAO,SAAUP,eAAV,CAA0BQ,WAA1B,EAAuCC,aAAvC,EAAsDC,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OADD,GACWL,GAAG,CAACM,kBAAJ,CAAuBC,IAAvB,CAA4B,IAA5B,EAAkCL,WAAlC,EAA+CC,aAA/C,EAA8DC,MAA9D,CADX;AAAA;AAEL,iBAAMH,WAAW,CAACI,OAAD,EAAUT,aAAa,CAACY,SAAxB,EAAmCN,WAAnC,CAAjB;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP;;AACA;;AACA;;AACA,OAAO,SAAUP,oBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAE0C,iBAAMI,IAAI,CAACH,aAAa,CAACa,iBAAd,CAAgCZ,OAAhC,CAAD,CAAV;;AAF1C;AAAA;AAEIK,UAAAA,WAFJ,eAEIA,WAFJ;AAEiBE,UAAAA,MAFjB,eAEiBA,MAFjB;AAEyBD,UAAAA,aAFzB,eAEyBA,aAFzB;AAAA;AAGH,iBAAML,IAAI,CAACJ,eAAD,EAAkBQ,WAAlB,EAA+BC,aAA/B,EAA8CC,MAA9C,CAAV;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as searchActions from '../actions/search';\nimport {REQUEST} from '../actions';\nimport {fork, take} from 'redux-saga/effects';\nimport * as api from '../api/youtube-api';\nimport {fetchEntity} from './index';\n\nexport function* searchForVideos(searchQuery, nextPageToken, amount) {\n  const request = api.buildSearchRequest.bind(null, searchQuery, nextPageToken, amount);\n  yield fetchEntity(request, searchActions.forVideos, searchQuery);\n}\n\n/******************************************************************************/\n/******************************* WATCHERS *************************************/\n/******************************************************************************/\nexport function* watchSearchForVideos() {\n  while (true) {\n    const {searchQuery, amount, nextPageToken} = yield take(searchActions.SEARCH_FOR_VIDEOS[REQUEST]);\n    yield fork(searchForVideos, searchQuery, nextPageToken, amount);\n  }\n}"]},"metadata":{},"sourceType":"module"}