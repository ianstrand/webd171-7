{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(_callee),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchEntity);\n\nimport { all, call, put, fork } from 'redux-saga/effects';\nimport { watchMostPopularVideos, watchMostPopularVideosByCategory, watchVideoCategories } from './video';\nimport { watchWatchDetails } from './watch';\nimport { watchCommentThread } from './comment';\nimport { watchSearchForVideos } from './search';\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(watchMostPopularVideos), fork(watchVideoCategories), fork(watchMostPopularVideosByCategory), fork(watchWatchDetails), fork(watchCommentThread), fork(watchSearchForVideos)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/*\n* entity must have a success, request and failure method\n* request is a function that returns a promise when called\n* */\n\nexport function fetchEntity(request, entity) {\n  var _len,\n      args,\n      _key,\n      response,\n      _args2 = arguments;\n\n  return _regeneratorRuntime.wrap(function fetchEntity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          for (_len = _args2.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = _args2[_key];\n          }\n\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(request);\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return put(entity.success.apply(entity, [response.result].concat(args)));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 13;\n          return put(entity.failure.apply(entity, [_context2.t0].concat(args)));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\nexport function ignoreErrors(fn) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return function () {\n    var ignoreErrorCallback = function ignoreErrorCallback(response) {\n      return response;\n    };\n\n    return fn.apply(void 0, args).then(ignoreErrorCallback, ignoreErrorCallback);\n  };\n}","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/store/sagas/index.js"],"names":["fetchEntity","all","call","put","fork","watchMostPopularVideos","watchMostPopularVideosByCategory","watchVideoCategories","watchWatchDetails","watchCommentThread","watchSearchForVideos","request","entity","args","response","success","result","failure","ignoreErrors","fn","ignoreErrorCallback","then"],"mappings":";;;qDAoBiBA,W;;AApBjB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SAAQC,sBAAR,EAAgCC,gCAAhC,EAAkEC,oBAAlE,QAA6F,SAA7F;AACA,SAAQC,iBAAR,QAAgC,SAAhC;AACA,SAAQC,kBAAR,QAAiC,WAAjC;AACA,SAAQC,oBAAR,QAAmC,UAAnC;AACA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMT,GAAG,CAAC,CACRG,IAAI,CAACC,sBAAD,CADI,EAERD,IAAI,CAACG,oBAAD,CAFI,EAGRH,IAAI,CAACE,gCAAD,CAHI,EAIRF,IAAI,CAACI,iBAAD,CAJI,EAKRJ,IAAI,CAACK,kBAAD,CALI,EAMRL,IAAI,CAACM,oBAAD,CANI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWf;;;;;AAIA,OAAO,SAAUV,WAAV,CAAsBW,OAAtB,EAA+BC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA0CC,IAA1C;AAA0CA,YAAAA,IAA1C;AAAA;;AAAA;AAAA;AAEc,iBAAMX,IAAI,CAACS,OAAD,CAAV;;AAFd;AAEGG,UAAAA,QAFH;AAAA;AAKH,iBAAMX,GAAG,CAACS,MAAM,CAACG,OAAP,OAAAH,MAAM,GAASE,QAAQ,CAACE,MAAlB,SAA6BH,IAA7B,EAAP,CAAT;;AALG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOH,iBAAMV,GAAG,CAACS,MAAM,CAACK,OAAP,OAAAL,MAAM,wBAAmBC,IAAnB,EAAP,CAAT;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAASK,YAAT,CAAsBC,EAAtB,EAAmC;AAAA,qCAANN,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACxC,SAAO,YAAM;AACX,QAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACN,QAAD;AAAA,aAAcA,QAAd;AAAA,KAA5B;;AACA,WAAOK,EAAE,MAAF,SAAMN,IAAN,EAAYQ,IAAZ,CAAiBD,mBAAjB,EAAsCA,mBAAtC,CAAP;AACD,GAHD;AAID","sourcesContent":["import {all, call, put, fork} from 'redux-saga/effects';\nimport {watchMostPopularVideos, watchMostPopularVideosByCategory, watchVideoCategories} from './video';\nimport {watchWatchDetails} from './watch';\nimport {watchCommentThread} from './comment';\nimport {watchSearchForVideos} from './search';\nexport default function* () {\n  yield all([\n    fork(watchMostPopularVideos),\n    fork(watchVideoCategories),\n    fork(watchMostPopularVideosByCategory),\n    fork(watchWatchDetails),\n    fork(watchCommentThread),\n    fork(watchSearchForVideos)\n  ]);\n}\n\n/*\n* entity must have a success, request and failure method\n* request is a function that returns a promise when called\n* */\nexport function* fetchEntity(request, entity, ...args) {\n  try {\n    const response = yield call(request);\n    // we directly return the result object and throw away the headers and the status text here\n    // if status and headers are needed, then instead of returning response.result, we have to return just response.\n    yield put(entity.success(response.result, ...args));\n  } catch (error) {\n    yield put(entity.failure(error, ...args));\n  }\n}\n\nexport function ignoreErrors(fn, ...args) {\n  return () => {\n    const ignoreErrorCallback = (response) => response;\n    return fn(...args).then(ignoreErrorCallback, ignoreErrorCallback);\n  };\n}"]},"metadata":{},"sourceType":"module"}