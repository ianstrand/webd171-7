{"ast":null,"code":"import _objectSpread from \"/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { MOST_POPULAR, MOST_POPULAR_BY_CATEGORY, VIDEO_CATEGORIES } from '../actions/video';\nimport { SUCCESS } from '../actions';\nimport { createSelector } from 'reselect';\nimport { SEARCH_LIST_RESPONSE, VIDEO_LIST_RESPONSE } from '../api/youtube-api-response-types';\nimport { VIDEO_DETAILS, WATCH_DETAILS } from '../actions/watch';\nimport { getSearchParam } from '../../services/url';\nexport var initialState = {\n  byId: {},\n  mostPopular: {},\n  categories: {},\n  byCategory: {},\n  related: {}\n};\nexport default function videos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case MOST_POPULAR[SUCCESS]:\n      return reduceFetchMostPopularVideos(action.response, state);\n\n    case VIDEO_CATEGORIES[SUCCESS]:\n      return reduceFetchVideoCategories(action.response, state);\n\n    case MOST_POPULAR_BY_CATEGORY[SUCCESS]:\n      return reduceFetchMostPopularVideosByCategory(action.response, action.categories, state);\n\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, state);\n\n    case VIDEO_DETAILS[SUCCESS]:\n      return reduceVideoDetails(action.response, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction reduceFetchMostPopularVideos(response, prevState) {\n  var videoMap = response.items.reduce(function (accumulator, video) {\n    accumulator[video.id] = video;\n    return accumulator;\n  }, {});\n  var items = Object.keys(videoMap);\n\n  if (response.hasOwnProperty('prevPageToken') && prevState.mostPopular) {\n    items = [].concat(_toConsumableArray(prevState.mostPopular.items), _toConsumableArray(items));\n  }\n\n  var mostPopular = {\n    totalResults: response.pageInfo.totalResults,\n    nextPageToken: response.nextPageToken,\n    items\n  };\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    mostPopular,\n    byId: _objectSpread(_objectSpread({}, prevState.byId), videoMap)\n  });\n}\n\nfunction reduceFetchVideoCategories(response, prevState) {\n  var categoryMapping = response.items.reduce(function (accumulator, category) {\n    accumulator[category.id] = category.snippet.title;\n    return accumulator;\n  }, {});\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    categories: categoryMapping\n  });\n}\n\nfunction reduceFetchMostPopularVideosByCategory(responses, categories, prevState) {\n  var videoMap = {};\n  var byCategoryMap = {};\n  responses.forEach(function (response, index) {\n    // ignore answer if there was an error\n    if (response.status === 400) return;\n    var categoryId = categories[index];\n\n    var _groupVideosByIdAndCa = groupVideosByIdAndCategory(response.result),\n        byId = _groupVideosByIdAndCa.byId,\n        byCategory = _groupVideosByIdAndCa.byCategory;\n\n    videoMap = _objectSpread(_objectSpread({}, videoMap), byId);\n    byCategoryMap[categoryId] = byCategory;\n  }); // compute new state\n\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    byId: _objectSpread(_objectSpread({}, prevState.byId), videoMap),\n    byCategory: _objectSpread(_objectSpread({}, prevState.byCategory), byCategoryMap)\n  });\n}\n\nfunction groupVideosByIdAndCategory(response) {\n  var videos = response.items;\n  var byId = {};\n  var byCategory = {\n    totalResults: response.pageInfo.totalResults,\n    nextPageToken: response.nextPageToken,\n    items: []\n  };\n  videos.forEach(function (video) {\n    byId[video.id] = video;\n    var items = byCategory.items;\n\n    if (items && items) {\n      items.push(video.id);\n    } else {\n      byCategory.items = [video.id];\n    }\n  });\n  return {\n    byId,\n    byCategory\n  };\n}\n\nfunction reduceWatchDetails(responses, prevState) {\n  var videoDetailResponse = responses.find(function (r) {\n    return r.result.kind === VIDEO_LIST_RESPONSE;\n  }); // we know that items will only have one element\n  // because we explicitly asked for a video with a specific id\n\n  var video = videoDetailResponse.result.items[0];\n  var relatedEntry = reduceRelatedVideosRequest(responses);\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    byId: _objectSpread(_objectSpread({}, prevState.byId), {}, {\n      [video.id]: video\n    }),\n    related: _objectSpread(_objectSpread({}, prevState.related), {}, {\n      [video.id]: relatedEntry\n    })\n  });\n}\n\nfunction reduceRelatedVideosRequest(responses) {\n  var relatedVideosResponse = responses.find(function (r) {\n    return r.result.kind === SEARCH_LIST_RESPONSE;\n  });\n  var _relatedVideosRespons = relatedVideosResponse.result,\n      pageInfo = _relatedVideosRespons.pageInfo,\n      items = _relatedVideosRespons.items,\n      nextPageToken = _relatedVideosRespons.nextPageToken;\n  var relatedVideoIds = items.map(function (video) {\n    return video.id.videoId;\n  });\n  return {\n    totalResults: pageInfo.totalResults,\n    nextPageToken,\n    items: relatedVideoIds\n  };\n}\n\nfunction reduceVideoDetails(responses, prevState) {\n  var videoResponses = responses.filter(function (response) {\n    return response.result.kind === VIDEO_LIST_RESPONSE;\n  });\n  var parsedVideos = videoResponses.reduce(function (videoMap, response) {\n    // we're explicitly asking for a video with a particular id\n    // so the response set must either contain 0 items (if a video with the id does not exist)\n    // or at most one item (i.e. the channel we've been asking for)\n    var video = response.result.items ? response.result.items[0] : null;\n\n    if (!video) {\n      return videoMap;\n    }\n\n    videoMap[video.id] = video;\n    return videoMap;\n  }, {});\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    byId: _objectSpread(_objectSpread({}, prevState.byId), parsedVideos)\n  });\n}\n/* function reduceVideoDetails(responses) {\n  const videoResponses = responses.filter(response => response.result.kind === VIDEO_LIST_RESPONSE);\n  return videoResponses.reduce((accumulator, response) => {\n    response.result.items.forEach(video => {\n      accumulator[video.id] = video;\n    });\n    return accumulator;\n  }, {});\n}\n\nfunction reduceRelatedVideos(responses, videoIds) {\n  const videoResponses = responses.filter(response => response.result.kind === SEARCH_LIST_RESPONSE);\n  return videoResponses.reduce((accumulator, response, index) => {\n    const relatedIds = response.result.items.map(video => video.id.videoId);\n    accumulator[videoIds[index]] = {\n      totalResults: response.result.pageInfo.totalResults,\n      nextPageToken: response.result.nextPageToken,\n      items: relatedIds\n    };\n    return accumulator;\n  }, {});\n} */\n\n/*\n*   Selectors\n* */\n\n\nvar getMostPopular = function getMostPopular(state) {\n  return state.videos.mostPopular;\n};\n\nexport var getMostPopularVideos = createSelector(function (state) {\n  return state.videos.byId;\n}, getMostPopular, function (videosById, mostPopular) {\n  if (!mostPopular || !mostPopular.items) {\n    return [];\n  }\n\n  return mostPopular.items.map(function (videoId) {\n    return videosById[videoId];\n  });\n});\nexport var getVideoCategoryIds = createSelector(function (state) {\n  return state.videos.categories;\n}, function (categories) {\n  return Object.keys(categories || {});\n});\nexport var getVideosByCategory = createSelector(function (state) {\n  return state.videos.byCategory;\n}, function (state) {\n  return state.videos.byId;\n}, function (state) {\n  return state.videos.categories;\n}, function (videosByCategory, videosById, categories) {\n  return Object.keys(videosByCategory || {}).reduce(function (accumulator, categoryId) {\n    var videoIds = videosByCategory[categoryId].items;\n    var categoryTitle = categories[categoryId];\n    accumulator[categoryTitle] = videoIds.map(function (videoId) {\n      return videosById[videoId];\n    });\n    return accumulator;\n  }, {});\n});\nexport var videoCategoriesLoaded = createSelector(function (state) {\n  return state.videos.categories;\n}, function (categories) {\n  return Object.keys(categories || {}).length !== 0;\n});\nexport var videosByCategoryLoaded = createSelector(function (state) {\n  return state.videos.byCategory;\n}, function (videosByCategory) {\n  return Object.keys(videosByCategory || {}).length;\n});\nexport var getVideoById = function getVideoById(state, videoId) {\n  return state.videos.byId[videoId];\n};\n\nvar getRelatedVideoIds = function getRelatedVideoIds(state, videoId) {\n  var related = state.videos.related[videoId];\n  return related ? related.items : [];\n};\n\nexport var getRelatedVideos = createSelector(getRelatedVideoIds, function (state) {\n  return state.videos.byId;\n}, function (relatedVideoIds, videos) {\n  if (relatedVideoIds) {\n    // filter kicks out null values we might have\n    return relatedVideoIds.map(function (videoId) {\n      return videos[videoId];\n    }).filter(function (video) {\n      return video;\n    });\n  }\n\n  return [];\n});\nexport var getChannelId = function getChannelId(state, location, name) {\n  var videoId = getSearchParam(location, name);\n  var video = state.videos.byId[videoId];\n\n  if (video) {\n    return video.snippet.channelId;\n  }\n\n  return null;\n};\nexport var getAmountComments = createSelector(getVideoById, function (video) {\n  if (video) {\n    return video.statistics.commentCount;\n  }\n\n  return 0;\n});\nexport var allMostPopularVideosLoaded = createSelector([getMostPopular], function (mostPopular) {\n  var amountFetchedItems = mostPopular.items ? mostPopular.items.length : 0;\n  return amountFetchedItems === mostPopular.totalResults;\n});\nexport var getMostPopularVideosNextPageToken = createSelector([getMostPopular], function (mostPopular) {\n  return mostPopular.nextPageToken;\n});","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/store/reducers/videos.js"],"names":["MOST_POPULAR","MOST_POPULAR_BY_CATEGORY","VIDEO_CATEGORIES","SUCCESS","createSelector","SEARCH_LIST_RESPONSE","VIDEO_LIST_RESPONSE","VIDEO_DETAILS","WATCH_DETAILS","getSearchParam","initialState","byId","mostPopular","categories","byCategory","related","videos","state","action","type","reduceFetchMostPopularVideos","response","reduceFetchVideoCategories","reduceFetchMostPopularVideosByCategory","reduceWatchDetails","reduceVideoDetails","prevState","videoMap","items","reduce","accumulator","video","id","Object","keys","hasOwnProperty","totalResults","pageInfo","nextPageToken","categoryMapping","category","snippet","title","responses","byCategoryMap","forEach","index","status","categoryId","groupVideosByIdAndCategory","result","push","videoDetailResponse","find","r","kind","relatedEntry","reduceRelatedVideosRequest","relatedVideosResponse","relatedVideoIds","map","videoId","videoResponses","filter","parsedVideos","getMostPopular","getMostPopularVideos","videosById","getVideoCategoryIds","getVideosByCategory","videosByCategory","videoIds","categoryTitle","videoCategoriesLoaded","length","videosByCategoryLoaded","getVideoById","getRelatedVideoIds","getRelatedVideos","getChannelId","location","name","channelId","getAmountComments","statistics","commentCount","allMostPopularVideosLoaded","amountFetchedItems","getMostPopularVideosNextPageToken"],"mappings":"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","sourcesContent":["import {MOST_POPULAR, MOST_POPULAR_BY_CATEGORY, VIDEO_CATEGORIES} from '../actions/video';\nimport {SUCCESS} from '../actions';\nimport {createSelector} from 'reselect';\nimport {SEARCH_LIST_RESPONSE, VIDEO_LIST_RESPONSE} from '../api/youtube-api-response-types';\nimport {VIDEO_DETAILS, WATCH_DETAILS} from '../actions/watch';\nimport {getSearchParam} from '../../services/url';\n\nexport const initialState = {\n  byId: {},\n  mostPopular: {},\n  categories: {},\n  byCategory: {},\n  related: {},\n};\nexport default function videos(state = initialState, action) {\n  switch (action.type) {\n    case MOST_POPULAR[SUCCESS]:\n      return reduceFetchMostPopularVideos(action.response, state);\n    case VIDEO_CATEGORIES[SUCCESS]:\n      return reduceFetchVideoCategories(action.response, state);\n    case MOST_POPULAR_BY_CATEGORY[SUCCESS]:\n      return reduceFetchMostPopularVideosByCategory(action.response, action.categories, state);\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, state);\n    case VIDEO_DETAILS[SUCCESS]:\n      return reduceVideoDetails(action.response, state);\n    default:\n      return state;\n  }\n}\n\nfunction reduceFetchMostPopularVideos(response, prevState) {\n  const videoMap = response.items.reduce((accumulator, video) => {\n    accumulator[video.id] = video;\n    return accumulator;\n  }, {});\n\n  let items = Object.keys(videoMap);\n  if (response.hasOwnProperty('prevPageToken') && prevState.mostPopular) {\n    items = [...prevState.mostPopular.items, ...items];\n  }\n\n  const mostPopular = {\n    totalResults: response.pageInfo.totalResults,\n    nextPageToken: response.nextPageToken,\n    items,\n  };\n\n  return {\n    ...prevState,\n    mostPopular,\n    byId: {...prevState.byId, ...videoMap},\n  };\n}\n\nfunction reduceFetchVideoCategories(response, prevState) {\n  const categoryMapping = response.items.reduce((accumulator, category) => {\n    accumulator[category.id] = category.snippet.title;\n    return accumulator;\n  }, {});\n  return {\n    ...prevState,\n    categories: categoryMapping,\n  };\n}\n\nfunction reduceFetchMostPopularVideosByCategory(responses, categories, prevState) {\n  let videoMap = {};\n  let byCategoryMap = {};\n\n  responses.forEach((response, index) => {\n    // ignore answer if there was an error\n    if (response.status === 400) return;\n\n    const categoryId = categories[index];\n    const {byId, byCategory} = groupVideosByIdAndCategory(response.result);\n    videoMap = {...videoMap, ...byId};\n    byCategoryMap[categoryId] = byCategory;\n  });\n\n  // compute new state\n  return {\n    ...prevState,\n    byId: {...prevState.byId, ...videoMap},\n    byCategory: {...prevState.byCategory, ...byCategoryMap},\n  };\n}\n\nfunction groupVideosByIdAndCategory(response) {\n  const videos = response.items;\n  const byId = {};\n  const byCategory = {\n    totalResults: response.pageInfo.totalResults,\n    nextPageToken: response.nextPageToken,\n    items: [],\n  };\n\n  videos.forEach((video) => {\n    byId[video.id] = video;\n\n    const items = byCategory.items;\n    if(items && items) {\n      items.push(video.id);\n    } else {\n      byCategory.items = [video.id];\n    }\n  });\n\n  return {byId, byCategory};\n}\n\nfunction reduceWatchDetails(responses, prevState) {\n  const videoDetailResponse = responses.find(r => r.result.kind === VIDEO_LIST_RESPONSE);\n  // we know that items will only have one element\n  // because we explicitly asked for a video with a specific id\n  const video = videoDetailResponse.result.items[0];\n  const relatedEntry = reduceRelatedVideosRequest(responses);\n\n  return {\n    ...prevState,\n    byId: {\n      ...prevState.byId,\n      [video.id]: video\n    },\n    related: {\n      ...prevState.related,\n      [video.id]: relatedEntry\n    }\n  };\n}\n\nfunction reduceRelatedVideosRequest(responses) {\n  const relatedVideosResponse = responses.find(r => r.result.kind === SEARCH_LIST_RESPONSE);\n  const {pageInfo, items, nextPageToken} = relatedVideosResponse.result;\n  const relatedVideoIds = items.map(video => video.id.videoId);\n\n  return {\n    totalResults: pageInfo.totalResults,\n    nextPageToken,\n    items: relatedVideoIds\n  };\n}\n\nfunction reduceVideoDetails(responses, prevState) {\n  const videoResponses = responses.filter(response => response.result.kind === VIDEO_LIST_RESPONSE);\n  const parsedVideos = videoResponses.reduce((videoMap, response) => {\n    // we're explicitly asking for a video with a particular id\n    // so the response set must either contain 0 items (if a video with the id does not exist)\n    // or at most one item (i.e. the channel we've been asking for)\n    const video = response.result.items ? response.result.items[0] : null;\n    if (!video) {\n      return videoMap;\n    }\n    videoMap[video.id] = video;\n    return videoMap;\n  }, {});\n\n  return {\n    ...prevState,\n    byId: {...prevState.byId, ...parsedVideos},\n  };\n}\n\n/* function reduceVideoDetails(responses) {\n  const videoResponses = responses.filter(response => response.result.kind === VIDEO_LIST_RESPONSE);\n  return videoResponses.reduce((accumulator, response) => {\n    response.result.items.forEach(video => {\n      accumulator[video.id] = video;\n    });\n    return accumulator;\n  }, {});\n}\n\nfunction reduceRelatedVideos(responses, videoIds) {\n  const videoResponses = responses.filter(response => response.result.kind === SEARCH_LIST_RESPONSE);\n  return videoResponses.reduce((accumulator, response, index) => {\n    const relatedIds = response.result.items.map(video => video.id.videoId);\n    accumulator[videoIds[index]] = {\n      totalResults: response.result.pageInfo.totalResults,\n      nextPageToken: response.result.nextPageToken,\n      items: relatedIds\n    };\n    return accumulator;\n  }, {});\n} */\n\n\n/*\n*   Selectors\n* */\nconst getMostPopular = (state) => state.videos.mostPopular;\nexport const getMostPopularVideos = createSelector(\n  (state) => state.videos.byId,\n  getMostPopular,\n  (videosById, mostPopular) => {\n    if (!mostPopular || !mostPopular.items) {\n      return [];\n    }\n    return mostPopular.items.map(videoId => videosById[videoId]);\n  }\n);\nexport const getVideoCategoryIds = createSelector(\n  state => state.videos.categories,\n  (categories) => {\n    return Object.keys(categories || {});\n  }\n);\n\nexport const getVideosByCategory = createSelector(\n  state => state.videos.byCategory,\n  state => state.videos.byId,\n  state => state.videos.categories,\n  (videosByCategory, videosById, categories) => {\n    return Object.keys(videosByCategory || {}).reduce((accumulator, categoryId) => {\n      const videoIds = videosByCategory[categoryId].items;\n      const categoryTitle = categories[categoryId];\n      accumulator[categoryTitle] = videoIds.map(videoId => videosById[videoId]);\n      return accumulator;\n    }, {});\n  }\n);\n\nexport const videoCategoriesLoaded = createSelector(\n  state => state.videos.categories,\n  (categories) => {\n    return Object.keys(categories || {}).length !== 0;\n  }\n);\n\nexport const videosByCategoryLoaded = createSelector(\n  state => state.videos.byCategory,\n  (videosByCategory) => {\n    return Object.keys(videosByCategory || {}).length;\n  }\n);\n\nexport const getVideoById = (state, videoId) => {\n  return state.videos.byId[videoId];\n};\nconst getRelatedVideoIds = (state, videoId) => {\n  const related = state.videos.related[videoId];\n  return related ? related.items : [];\n};\nexport const getRelatedVideos = createSelector(\n  getRelatedVideoIds,\n  state => state.videos.byId,\n  (relatedVideoIds, videos) => {\n    if (relatedVideoIds) {\n      // filter kicks out null values we might have\n      return relatedVideoIds.map(videoId => videos[videoId]).filter(video => video);\n    }\n    return [];\n  });\n\nexport const getChannelId = (state, location, name) => {\n  const videoId = getSearchParam(location, name);\n  const video = state.videos.byId[videoId];\n  if (video) {\n    return video.snippet.channelId;\n  }\n  return null;\n};\n\nexport const getAmountComments = createSelector(\n  getVideoById,\n  (video) => {\n    if (video) {\n      return video.statistics.commentCount;\n    }\n    return 0;\n  });\n\nexport const allMostPopularVideosLoaded = createSelector(\n  [getMostPopular],\n  (mostPopular) => {\n    const amountFetchedItems = mostPopular.items ? mostPopular.items.length : 0;\n    return amountFetchedItems === mostPopular.totalResults;\n  }\n);\n\nexport const getMostPopularVideosNextPageToken = createSelector(\n  [getMostPopular],\n  (mostPopular) => {\n    return mostPopular.nextPageToken;\n  }\n);\n\n"]},"metadata":{},"sourceType":"module"}