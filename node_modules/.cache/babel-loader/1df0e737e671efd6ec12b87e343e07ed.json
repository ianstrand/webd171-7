{"ast":null,"code":"var objMap = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\nvar numbers = '\\\\d+(?:[\\\\.,]\\\\d{0,3})?';\nvar datePattern = \"(\".concat(numbers, \"Y)?(\").concat(numbers, \"M)?(\").concat(numbers, \"D)?\");\nvar timePattern = \"T(\".concat(numbers, \"H)?(\").concat(numbers, \"M)?(\").concat(numbers, \"S)?\");\nvar pattern = new RegExp(\"P(?:\".concat(datePattern, \"(?:\").concat(timePattern, \")?)\"));\nexport function parseISO8601TimePattern(durationString) {\n  // https://github.com/tolu/ISO8601-duration/blob/master/src/index.js\n  return durationString.match(pattern).slice(1).reduce(function (prev, next, idx) {\n    prev[objMap[idx]] = parseFloat(next) || 0;\n    return prev;\n  }, {});\n}\nexport function getPublishedAtDateString(iso8601DateString) {\n  if (!iso8601DateString) {\n    return '';\n  }\n\n  var date = new Date(Date.parse(iso8601DateString));\n  return date.toDateString();\n}\nexport function getVideoDurationString(iso8601DurationString) {\n  if (!iso8601DurationString || iso8601DurationString === '') {\n    return '';\n  } // new Date(Date.parse(...)) doesn't work here\n  // therefore we are using our regex approach\n\n\n  var _parseISO8601TimePatt = parseISO8601TimePattern(iso8601DurationString),\n      days = _parseISO8601TimePatt.days,\n      hours = _parseISO8601TimePatt.hours,\n      minutes = _parseISO8601TimePatt.minutes,\n      seconds = _parseISO8601TimePatt.seconds;\n\n  var secondsString = seconds.toString();\n  var minutesString = minutes.toString();\n  var accumulatedHours = days * 24 + hours;\n\n  if (seconds < 10) {\n    secondsString = seconds.toString().padStart(2, '0');\n  }\n\n  if (minutes < 10 && hours !== 0) {\n    minutesString = minutesString.toString().padStart(2, '0');\n  }\n\n  if (!accumulatedHours) {\n    return [minutesString, secondsString].join(':');\n  } else {\n    return [accumulatedHours, minutesString, secondsString].join(':');\n  }\n}","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/services/date/date-format.js"],"names":["objMap","numbers","datePattern","timePattern","pattern","RegExp","parseISO8601TimePattern","durationString","match","slice","reduce","prev","next","idx","parseFloat","getPublishedAtDateString","iso8601DateString","date","Date","parse","toDateString","getVideoDurationString","iso8601DurationString","days","hours","minutes","seconds","secondsString","toString","minutesString","accumulatedHours","padStart","join"],"mappings":"AAAA,IAAMA,MAAM,GAAG,CAAC,OAAD,EAAU,QAAV,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,SAApC,EAA+C,SAA/C,CAAf;AACA,IAAMC,OAAO,GAAG,yBAAhB;AACA,IAAMC,WAAW,cAAOD,OAAP,iBAAqBA,OAArB,iBAAmCA,OAAnC,QAAjB;AACA,IAAME,WAAW,eAAQF,OAAR,iBAAsBA,OAAtB,iBAAoCA,OAApC,QAAjB;AACA,IAAMG,OAAO,GAAG,IAAIC,MAAJ,eAAkBH,WAAlB,gBAAmCC,WAAnC,SAAhB;AAEA,OAAO,SAASG,uBAAT,CAAiCC,cAAjC,EAAiD;AACtD;AACA,SAAOA,cAAc,CAACC,KAAf,CAAqBJ,OAArB,EAA8BK,KAA9B,CAAoC,CAApC,EAAuCC,MAAvC,CAA8C,UAACC,IAAD,EAAOC,IAAP,EAAaC,GAAb,EAAqB;AACxEF,IAAAA,IAAI,CAACX,MAAM,CAACa,GAAD,CAAP,CAAJ,GAAoBC,UAAU,CAACF,IAAD,CAAV,IAAoB,CAAxC;AACA,WAAOD,IAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;AAED,OAAO,SAASI,wBAAT,CAAkCC,iBAAlC,EAAqD;AAC1D,MAAI,CAACA,iBAAL,EAAwB;AACtB,WAAO,EAAP;AACD;;AACD,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWH,iBAAX,CAAT,CAAb;AACA,SAAOC,IAAI,CAACG,YAAL,EAAP;AACD;AAED,OAAO,SAASC,sBAAT,CAAgCC,qBAAhC,EAAuD;AAC5D,MAAI,CAACA,qBAAD,IAA0BA,qBAAqB,KAAK,EAAxD,EAA4D;AAC1D,WAAO,EAAP;AACD,GAH2D,CAK5D;AACA;;;AAN4D,8BAOtBhB,uBAAuB,CAACgB,qBAAD,CAPD;AAAA,MAOvDC,IAPuD,yBAOvDA,IAPuD;AAAA,MAOjDC,KAPiD,yBAOjDA,KAPiD;AAAA,MAO1CC,OAP0C,yBAO1CA,OAP0C;AAAA,MAOjCC,OAPiC,yBAOjCA,OAPiC;;AAS5D,MAAIC,aAAa,GAAGD,OAAO,CAACE,QAAR,EAApB;AACA,MAAIC,aAAa,GAAGJ,OAAO,CAACG,QAAR,EAApB;AACA,MAAIE,gBAAgB,GAAGP,IAAI,GAAG,EAAP,GAAYC,KAAnC;;AAEA,MAAIE,OAAO,GAAG,EAAd,EAAkB;AAChBC,IAAAA,aAAa,GAAGD,OAAO,CAACE,QAAR,GAAmBG,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAhB;AACD;;AACD,MAAIN,OAAO,GAAG,EAAV,IAAgBD,KAAK,KAAK,CAA9B,EAAiC;AAC/BK,IAAAA,aAAa,GAAGA,aAAa,CAACD,QAAd,GAAyBG,QAAzB,CAAkC,CAAlC,EAAqC,GAArC,CAAhB;AACD;;AACD,MAAI,CAACD,gBAAL,EAAuB;AACrB,WAAO,CAACD,aAAD,EAAgBF,aAAhB,EAA+BK,IAA/B,CAAoC,GAApC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,CAACF,gBAAD,EAAmBD,aAAnB,EAAkCF,aAAlC,EAAiDK,IAAjD,CAAsD,GAAtD,CAAP;AACD;AACF","sourcesContent":["const objMap = ['years', 'months','days', 'hours', 'minutes', 'seconds'];\nconst numbers = '\\\\d+(?:[\\\\.,]\\\\d{0,3})?';\nconst datePattern = `(${numbers}Y)?(${numbers}M)?(${numbers}D)?`;\nconst timePattern = `T(${numbers}H)?(${numbers}M)?(${numbers}S)?`;\nconst pattern = new RegExp(`P(?:${datePattern}(?:${timePattern})?)`);\n\nexport function parseISO8601TimePattern(durationString) {\n  // https://github.com/tolu/ISO8601-duration/blob/master/src/index.js\n  return durationString.match(pattern).slice(1).reduce((prev, next, idx) => {\n    prev[objMap[idx]] = parseFloat(next) || 0;\n    return prev\n  }, {});\n}\n\nexport function getPublishedAtDateString(iso8601DateString) {\n  if (!iso8601DateString) {\n    return '';\n  }\n  const date = new Date(Date.parse(iso8601DateString));\n  return date.toDateString();\n}\n\nexport function getVideoDurationString(iso8601DurationString) {\n  if (!iso8601DurationString || iso8601DurationString === '') {\n    return '';\n  }\n\n  // new Date(Date.parse(...)) doesn't work here\n  // therefore we are using our regex approach\n  let {days, hours, minutes, seconds} = parseISO8601TimePattern(iso8601DurationString);\n\n  let secondsString = seconds.toString();\n  let minutesString = minutes.toString();\n  let accumulatedHours = days * 24 + hours;\n\n  if (seconds < 10) {\n    secondsString = seconds.toString().padStart(2, '0');\n  }\n  if (minutes < 10 && hours !== 0) {\n    minutesString = minutesString.toString().padStart(2, '0');\n  }\n  if (!accumulatedHours) {\n    return [minutesString, secondsString].join(':');\n  } else {\n    return [accumulatedHours, minutesString, secondsString].join(':');\n  }\n}"]},"metadata":{},"sourceType":"module"}