{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchMostPopularVideosByCategory),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchMostPopularVideos),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchMostPopularVideos),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchVideoCategories),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchMostPopularVideosByCategory);\n\nimport { fork, take, takeEvery, call, all, put } from 'redux-saga/effects';\nimport * as api from '../api/youtube-api';\nimport * as videoActions from '../actions/video';\nimport { REQUEST } from '../actions';\nimport { fetchEntity, ignoreErrors } from './index';\nexport var fetchVideoCategories = fetchEntity.bind(null, api.buildVideoCategoriesRequest, videoActions.categories);\nexport function fetchMostPopularVideosByCategory(categories) {\n  var requests, response;\n  return _regeneratorRuntime.wrap(function fetchMostPopularVideosByCategory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          requests = categories.map(function (categoryId) {\n            var wrapper = ignoreErrors(api.buildMostPopularVideosRequest, 12, false, null, categoryId);\n            return call(wrapper);\n          });\n          _context.prev = 1;\n          _context.next = 4;\n          return all(requests);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put(videoActions.mostPopularByCategory.success(response, categories));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(videoActions.mostPopularByCategory.failure(_context.t0));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\nexport function fetchMostPopularVideos(amount, loadDescription, nextPageToken) {\n  var request;\n  return _regeneratorRuntime.wrap(function fetchMostPopularVideos$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          request = api.buildMostPopularVideosRequest.bind(null, amount, loadDescription, nextPageToken);\n          _context2.next = 3;\n          return fetchEntity(request, videoActions.mostPopular);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n/******************************************************************************/\n\n/******************************* WATCHERS *************************************/\n\n/******************************************************************************/\n\nexport function watchMostPopularVideos() {\n  var _yield$take, amount, loadDescription, nextPageToken;\n\n  return _regeneratorRuntime.wrap(function watchMostPopularVideos$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.next = 3;\n          return take(videoActions.MOST_POPULAR[REQUEST]);\n\n        case 3:\n          _yield$take = _context3.sent;\n          amount = _yield$take.amount;\n          loadDescription = _yield$take.loadDescription;\n          nextPageToken = _yield$take.nextPageToken;\n          _context3.next = 9;\n          return fork(fetchMostPopularVideos, amount, loadDescription, nextPageToken);\n\n        case 9:\n          _context3.next = 0;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchVideoCategories() {\n  return _regeneratorRuntime.wrap(function watchVideoCategories$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(videoActions.VIDEO_CATEGORIES[REQUEST], fetchVideoCategories);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function watchMostPopularVideosByCategory() {\n  var _yield$take2, categories;\n\n  return _regeneratorRuntime.wrap(function watchMostPopularVideosByCategory$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!true) {\n            _context5.next = 9;\n            break;\n          }\n\n          _context5.next = 3;\n          return take(videoActions.MOST_POPULAR_BY_CATEGORY[REQUEST]);\n\n        case 3:\n          _yield$take2 = _context5.sent;\n          categories = _yield$take2.categories;\n          _context5.next = 7;\n          return fork(fetchMostPopularVideosByCategory, categories);\n\n        case 7:\n          _context5.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/store/sagas/video.js"],"names":["fetchMostPopularVideosByCategory","fetchMostPopularVideos","watchMostPopularVideos","watchVideoCategories","watchMostPopularVideosByCategory","fork","take","takeEvery","call","all","put","api","videoActions","REQUEST","fetchEntity","ignoreErrors","fetchVideoCategories","bind","buildVideoCategoriesRequest","categories","requests","map","categoryId","wrapper","buildMostPopularVideosRequest","response","mostPopularByCategory","success","failure","amount","loadDescription","nextPageToken","request","mostPopular","MOST_POPULAR","VIDEO_CATEGORIES","MOST_POPULAR_BY_CATEGORY"],"mappings":";;oDASiBA,gC;qDAaAC,sB;qDASAC,sB;qDAOAC,oB;qDAGAC,gC;;AAzCjB,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,GAA1C,QAAoD,oBAApD;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,OAAO,KAAKC,YAAZ,MAA8B,kBAA9B;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,SAAxC;AAEA,OAAO,IAAMC,oBAAoB,GAAGF,WAAW,CAACG,IAAZ,CAAiB,IAAjB,EAAuBN,GAAG,CAACO,2BAA3B,EAAwDN,YAAY,CAACO,UAArE,CAA7B;AAGP,OAAO,SAAUnB,gCAAV,CAA2CmB,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,QADD,GACYD,UAAU,CAACE,GAAX,CAAe,UAAAC,UAAU,EAAI;AAC5C,gBAAMC,OAAO,GAAGR,YAAY,CAACJ,GAAG,CAACa,6BAAL,EAAoC,EAApC,EAAwC,KAAxC,EAA+C,IAA/C,EAAqDF,UAArD,CAA5B;AACA,mBAAOd,IAAI,CAACe,OAAD,CAAX;AACD,WAHgB,CADZ;AAAA;AAAA;AAMc,iBAAMd,GAAG,CAACW,QAAD,CAAT;;AANd;AAMGK,UAAAA,QANH;AAAA;AAOH,iBAAMf,GAAG,CAACE,YAAY,CAACc,qBAAb,CAAmCC,OAAnC,CAA2CF,QAA3C,EAAqDN,UAArD,CAAD,CAAT;;AAPG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASH,iBAAMT,GAAG,CAACE,YAAY,CAACc,qBAAb,CAAmCE,OAAnC,aAAD,CAAT;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAU3B,sBAAV,CAAiC4B,MAAjC,EAAyCC,eAAzC,EAA0DC,aAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OADD,GACWrB,GAAG,CAACa,6BAAJ,CAAkCP,IAAlC,CAAuC,IAAvC,EAA6CY,MAA7C,EAAqDC,eAArD,EAAsEC,aAAtE,CADX;AAAA;AAEL,iBAAMjB,WAAW,CAACkB,OAAD,EAAUpB,YAAY,CAACqB,WAAvB,CAAjB;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMP;;AACA;;AACA;;AACA,OAAO,SAAU/B,sBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAE8C,iBAAMI,IAAI,CAACM,YAAY,CAACsB,YAAb,CAA0BrB,OAA1B,CAAD,CAAV;;AAF9C;AAAA;AAEIgB,UAAAA,MAFJ,eAEIA,MAFJ;AAEYC,UAAAA,eAFZ,eAEYA,eAFZ;AAE6BC,UAAAA,aAF7B,eAE6BA,aAF7B;AAAA;AAGH,iBAAM1B,IAAI,CAACJ,sBAAD,EAAyB4B,MAAzB,EAAiCC,eAAjC,EAAkDC,aAAlD,CAAV;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAU5B,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,SAAS,CAACK,YAAY,CAACuB,gBAAb,CAA8BtB,OAA9B,CAAD,EAAyCG,oBAAzC,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,OAAO,SAAUZ,gCAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACC,IADD;AAAA;AAAA;AAAA;;AAAA;AAEkB,iBAAME,IAAI,CAACM,YAAY,CAACwB,wBAAb,CAAsCvB,OAAtC,CAAD,CAAV;;AAFlB;AAAA;AAEIM,UAAAA,UAFJ,gBAEIA,UAFJ;AAAA;AAGH,iBAAMd,IAAI,CAACL,gCAAD,EAAmCmB,UAAnC,CAAV;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {fork, take, takeEvery, call, all, put} from 'redux-saga/effects';\nimport * as api from '../api/youtube-api';\nimport * as videoActions from '../actions/video';\nimport {REQUEST} from '../actions';\nimport {fetchEntity, ignoreErrors} from './index';\n\nexport const fetchVideoCategories = fetchEntity.bind(null, api.buildVideoCategoriesRequest, videoActions.categories);\n\n\nexport function* fetchMostPopularVideosByCategory(categories) {\n  const requests = categories.map(categoryId => {\n    const wrapper = ignoreErrors(api.buildMostPopularVideosRequest, 12, false, null, categoryId);\n    return call(wrapper);\n  });\n  try {\n    const response = yield all(requests);\n    yield put(videoActions.mostPopularByCategory.success(response, categories));\n  } catch (error) {\n    yield put(videoActions.mostPopularByCategory.failure(error));\n  }\n}\n\nexport function* fetchMostPopularVideos(amount, loadDescription, nextPageToken) {\n  const request = api.buildMostPopularVideosRequest.bind(null, amount, loadDescription, nextPageToken);\n  yield fetchEntity(request, videoActions.mostPopular);\n}\n\n\n/******************************************************************************/\n/******************************* WATCHERS *************************************/\n/******************************************************************************/\nexport function* watchMostPopularVideos() {\n  while (true) {\n    const {amount, loadDescription, nextPageToken} = yield take(videoActions.MOST_POPULAR[REQUEST]);\n    yield fork(fetchMostPopularVideos, amount, loadDescription, nextPageToken);\n  }\n}\n\nexport function* watchVideoCategories() {\n  yield takeEvery(videoActions.VIDEO_CATEGORIES[REQUEST], fetchVideoCategories);\n}\nexport function* watchMostPopularVideosByCategory() {\n  while(true) {\n    const {categories} = yield take(videoActions.MOST_POPULAR_BY_CATEGORY[REQUEST]);\n    yield fork(fetchMostPopularVideosByCategory, categories);\n  }\n}"]},"metadata":{},"sourceType":"module"}