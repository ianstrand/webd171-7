{"ast":null,"code":"var objMap=['years','months','days','hours','minutes','seconds'];var numbers='\\\\d+(?:[\\\\.,]\\\\d{0,3})?';var datePattern=\"(\".concat(numbers,\"Y)?(\").concat(numbers,\"M)?(\").concat(numbers,\"D)?\");var timePattern=\"T(\".concat(numbers,\"H)?(\").concat(numbers,\"M)?(\").concat(numbers,\"S)?\");var pattern=new RegExp(\"P(?:\".concat(datePattern,\"(?:\").concat(timePattern,\")?)\"));export function parseISO8601TimePattern(durationString){// https://github.com/tolu/ISO8601-duration/blob/master/src/index.js\nreturn durationString.match(pattern).slice(1).reduce(function(prev,next,idx){prev[objMap[idx]]=parseFloat(next)||0;return prev;},{});}export function getPublishedAtDateString(iso8601DateString){if(!iso8601DateString){return'';}var date=new Date(Date.parse(iso8601DateString));return date.toDateString();}export function getVideoDurationString(iso8601DurationString){if(!iso8601DurationString||iso8601DurationString===''){return'';}// new Date(Date.parse(...)) doesn't work here\n// therefore we are using our regex approach\nvar _parseISO8601TimePatt=parseISO8601TimePattern(iso8601DurationString),days=_parseISO8601TimePatt.days,hours=_parseISO8601TimePatt.hours,minutes=_parseISO8601TimePatt.minutes,seconds=_parseISO8601TimePatt.seconds;var secondsString=seconds.toString();var minutesString=minutes.toString();var accumulatedHours=days*24+hours;if(seconds<10){secondsString=seconds.toString().padStart(2,'0');}if(minutes<10&&hours!==0){minutesString=minutesString.toString().padStart(2,'0');}if(!accumulatedHours){return[minutesString,secondsString].join(':');}else{return[accumulatedHours,minutesString,secondsString].join(':');}}","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/services/date/date-format.js"],"names":["objMap","numbers","datePattern","timePattern","pattern","RegExp","parseISO8601TimePattern","durationString","match","slice","reduce","prev","next","idx","parseFloat","getPublishedAtDateString","iso8601DateString","date","Date","parse","toDateString","getVideoDurationString","iso8601DurationString","days","hours","minutes","seconds","secondsString","toString","minutesString","accumulatedHours","padStart","join"],"mappings":"AAAA,GAAMA,CAAAA,MAAM,CAAG,CAAC,OAAD,CAAU,QAAV,CAAmB,MAAnB,CAA2B,OAA3B,CAAoC,SAApC,CAA+C,SAA/C,CAAf,CACA,GAAMC,CAAAA,OAAO,CAAG,yBAAhB,CACA,GAAMC,CAAAA,WAAW,YAAOD,OAAP,gBAAqBA,OAArB,gBAAmCA,OAAnC,OAAjB,CACA,GAAME,CAAAA,WAAW,aAAQF,OAAR,gBAAsBA,OAAtB,gBAAoCA,OAApC,OAAjB,CACA,GAAMG,CAAAA,OAAO,CAAG,GAAIC,CAAAA,MAAJ,eAAkBH,WAAlB,eAAmCC,WAAnC,QAAhB,CAEA,MAAO,SAASG,CAAAA,uBAAT,CAAiCC,cAAjC,CAAiD,CACtD;AACA,MAAOA,CAAAA,cAAc,CAACC,KAAf,CAAqBJ,OAArB,EAA8BK,KAA9B,CAAoC,CAApC,EAAuCC,MAAvC,CAA8C,SAACC,IAAD,CAAOC,IAAP,CAAaC,GAAb,CAAqB,CACxEF,IAAI,CAACX,MAAM,CAACa,GAAD,CAAP,CAAJ,CAAoBC,UAAU,CAACF,IAAD,CAAV,EAAoB,CAAxC,CACA,MAAOD,CAAAA,IAAP,CACD,CAHM,CAGJ,EAHI,CAAP,CAID,CAED,MAAO,SAASI,CAAAA,wBAAT,CAAkCC,iBAAlC,CAAqD,CAC1D,GAAI,CAACA,iBAAL,CAAwB,CACtB,MAAO,EAAP,CACD,CACD,GAAMC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWH,iBAAX,CAAT,CAAb,CACA,MAAOC,CAAAA,IAAI,CAACG,YAAL,EAAP,CACD,CAED,MAAO,SAASC,CAAAA,sBAAT,CAAgCC,qBAAhC,CAAuD,CAC5D,GAAI,CAACA,qBAAD,EAA0BA,qBAAqB,GAAK,EAAxD,CAA4D,CAC1D,MAAO,EAAP,CACD,CAED;AACA;AAN4D,0BAOtBhB,uBAAuB,CAACgB,qBAAD,CAPD,CAOvDC,IAPuD,uBAOvDA,IAPuD,CAOjDC,KAPiD,uBAOjDA,KAPiD,CAO1CC,OAP0C,uBAO1CA,OAP0C,CAOjCC,OAPiC,uBAOjCA,OAPiC,CAS5D,GAAIC,CAAAA,aAAa,CAAGD,OAAO,CAACE,QAAR,EAApB,CACA,GAAIC,CAAAA,aAAa,CAAGJ,OAAO,CAACG,QAAR,EAApB,CACA,GAAIE,CAAAA,gBAAgB,CAAGP,IAAI,CAAG,EAAP,CAAYC,KAAnC,CAEA,GAAIE,OAAO,CAAG,EAAd,CAAkB,CAChBC,aAAa,CAAGD,OAAO,CAACE,QAAR,GAAmBG,QAAnB,CAA4B,CAA5B,CAA+B,GAA/B,CAAhB,CACD,CACD,GAAIN,OAAO,CAAG,EAAV,EAAgBD,KAAK,GAAK,CAA9B,CAAiC,CAC/BK,aAAa,CAAGA,aAAa,CAACD,QAAd,GAAyBG,QAAzB,CAAkC,CAAlC,CAAqC,GAArC,CAAhB,CACD,CACD,GAAI,CAACD,gBAAL,CAAuB,CACrB,MAAO,CAACD,aAAD,CAAgBF,aAAhB,EAA+BK,IAA/B,CAAoC,GAApC,CAAP,CACD,CAFD,IAEO,CACL,MAAO,CAACF,gBAAD,CAAmBD,aAAnB,CAAkCF,aAAlC,EAAiDK,IAAjD,CAAsD,GAAtD,CAAP,CACD,CACF","sourcesContent":["const objMap = ['years', 'months','days', 'hours', 'minutes', 'seconds'];\nconst numbers = '\\\\d+(?:[\\\\.,]\\\\d{0,3})?';\nconst datePattern = `(${numbers}Y)?(${numbers}M)?(${numbers}D)?`;\nconst timePattern = `T(${numbers}H)?(${numbers}M)?(${numbers}S)?`;\nconst pattern = new RegExp(`P(?:${datePattern}(?:${timePattern})?)`);\n\nexport function parseISO8601TimePattern(durationString) {\n  // https://github.com/tolu/ISO8601-duration/blob/master/src/index.js\n  return durationString.match(pattern).slice(1).reduce((prev, next, idx) => {\n    prev[objMap[idx]] = parseFloat(next) || 0;\n    return prev\n  }, {});\n}\n\nexport function getPublishedAtDateString(iso8601DateString) {\n  if (!iso8601DateString) {\n    return '';\n  }\n  const date = new Date(Date.parse(iso8601DateString));\n  return date.toDateString();\n}\n\nexport function getVideoDurationString(iso8601DurationString) {\n  if (!iso8601DurationString || iso8601DurationString === '') {\n    return '';\n  }\n\n  // new Date(Date.parse(...)) doesn't work here\n  // therefore we are using our regex approach\n  let {days, hours, minutes, seconds} = parseISO8601TimePattern(iso8601DurationString);\n\n  let secondsString = seconds.toString();\n  let minutesString = minutes.toString();\n  let accumulatedHours = days * 24 + hours;\n\n  if (seconds < 10) {\n    secondsString = seconds.toString().padStart(2, '0');\n  }\n  if (minutes < 10 && hours !== 0) {\n    minutesString = minutesString.toString().padStart(2, '0');\n  }\n  if (!accumulatedHours) {\n    return [minutesString, secondsString].join(':');\n  } else {\n    return [accumulatedHours, minutesString, secondsString].join(':');\n  }\n}"]},"metadata":{},"sourceType":"module"}