{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchCommentThread),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchCommentThread);\n\nimport { fork, take } from 'redux-saga/effects';\nimport { REQUEST } from '../actions';\nimport * as commentActions from '../actions/comment';\nimport * as api from '../api/youtube-api';\nimport { fetchEntity } from './index';\nexport function fetchCommentThread(videoId, nextPageToken) {\n  var request;\n  return _regeneratorRuntime.wrap(function fetchCommentThread$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          request = api.buildCommentThreadRequest.bind(null, videoId, nextPageToken);\n          _context.next = 3;\n          return fetchEntity(request, commentActions.thread, videoId);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/******************************************************************************/\n\n/******************************* WATCHERS *************************************/\n\n/******************************************************************************/\n\nexport function watchCommentThread() {\n  var _yield$take, videoId, nextPageToken;\n\n  return _regeneratorRuntime.wrap(function watchCommentThread$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(commentActions.COMMENT_THREAD[REQUEST]);\n\n        case 3:\n          _yield$take = _context2.sent;\n          videoId = _yield$take.videoId;\n          nextPageToken = _yield$take.nextPageToken;\n          _context2.next = 8;\n          return fork(fetchCommentThread, videoId, nextPageToken);\n\n        case 8:\n          _context2.next = 0;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/ianstrand/Sites/strandian/strand/SDCCD/webd171/lessons/7/webd171-7/src/store/sagas/comment.js"],"names":["fetchCommentThread","watchCommentThread","fork","take","REQUEST","commentActions","api","fetchEntity","videoId","nextPageToken","request","buildCommentThreadRequest","bind","thread","COMMENT_THREAD"],"mappings":";;oDAMiBA,kB;qDAQAC,kB;;AAdjB,SAAQC,IAAR,EAAcC,IAAd,QAAyB,oBAAzB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAO,KAAKC,cAAZ,MAAgC,oBAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,SAAQC,WAAR,QAA0B,SAA1B;AAEA,OAAO,SAAUP,kBAAV,CAA6BQ,OAA7B,EAAsCC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OADD,GACWJ,GAAG,CAACK,yBAAJ,CAA8BC,IAA9B,CAAmC,IAAnC,EAAyCJ,OAAzC,EAAkDC,aAAlD,CADX;AAAA;AAEL,iBAAMF,WAAW,CAACG,OAAD,EAAUL,cAAc,CAACQ,MAAzB,EAAiCL,OAAjC,CAAjB;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP;;AACA;;AACA;;AACA,OAAO,SAAUP,kBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACC,IADD;AAAA;AAAA;AAAA;;AAAA;AAE8B,iBAAME,IAAI,CAACE,cAAc,CAACS,cAAf,CAA8BV,OAA9B,CAAD,CAAV;;AAF9B;AAAA;AAEII,UAAAA,OAFJ,eAEIA,OAFJ;AAEaC,UAAAA,aAFb,eAEaA,aAFb;AAAA;AAGH,iBAAMP,IAAI,CAACF,kBAAD,EAAqBQ,OAArB,EAA8BC,aAA9B,CAAV;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {fork, take} from 'redux-saga/effects';\nimport {REQUEST} from '../actions';\nimport * as commentActions from '../actions/comment'\nimport * as api from '../api/youtube-api';\nimport {fetchEntity} from './index';\n\nexport function* fetchCommentThread(videoId, nextPageToken) {\n  const request = api.buildCommentThreadRequest.bind(null, videoId, nextPageToken);\n  yield fetchEntity(request, commentActions.thread, videoId);\n}\n\n/******************************************************************************/\n/******************************* WATCHERS *************************************/\n/******************************************************************************/\nexport function* watchCommentThread() {\n  while(true) {\n    const {videoId, nextPageToken} = yield take(commentActions.COMMENT_THREAD[REQUEST]);\n    yield fork(fetchCommentThread, videoId, nextPageToken);\n  }\n}"]},"metadata":{},"sourceType":"module"}